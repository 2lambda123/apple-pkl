/// Schema for CircleCI config.yml
/// This module is a work in progress, if you find some unsuported feature
/// feel free to add it.
module CircleCI

// no need to use olders versions
version: Number(this == 2.1) = 2.1

commands: Mapping<String, Command>?

jobs: Mapping<String, Job>?

workflows: Mapping<String, Workflow>?

parameters: Mapping<String, Parameter>?

class Job {
  shell: String?
  steps: Listing<Step>(!isEmpty)
  working_directory: String?
  parallelism: Int?
  environment: Mapping<String, String>?
  resource_class: String?
  docker: Listing<DockerImage>?
  macos: MacOSExecutor?
}

class MacOSExecutor {
  xcode: String
}

class DockerImage {
  image: String
}

class Workflow {
  jobs: Listing<*Mapping<String, WorkflowJob>(length == 1)|String>
  `when`: LogicStatement?
}

class WorkflowJob {
  filters: Filter?
  requires: Listing<String>?
}

abstract class Filter

class BranchFilter extends Filter {
  branches: FilterSpec
}

class TagFilter extends Filter {
  tags: FilterSpec
}

class FilterSpec {
  only: String?(this != null || ignore != null)
  ignore: String?(this != null || only != null)
}

typealias Step = *StepConfig|"checkout"|"setup_remote_docker"|"add_ssh_keys"

class StepConfig {
  run: (*RunConfig|String)?
  store_test_results: Path?
  setup_remote_docker: SetupRemoteDocker?
  persist_to_workspace: PersistToWorkspace?
  attach_workspace: AttachWorkspace?
  command: CalledCommand?
}

class RunConfig {
  /// Command to run via the shell
  command: String

  /// Title of the step to be shown in the CircleCI UI (default: full `command`)
  name: String?
  
  /// Shell to use for execution command (default: See [Default Shell Options](https://circleci.com/docs/configuration-reference/#default-shell-options))
  shell: String?

  /// Additional environmental variables, locally scoped to command
  environment: Mapping<String, String>?

  /// Whether or not this step should run in the background (default: `false`)
  background: Boolean?

  /// In which directory to run this step. Will be interpreted relative to the working_directory
  /// of the job). (default: `.`)
  working_directory: String?

  /// Elapsed time the command can run without output.
  ///
  /// The default is 10 minutes and the maximum is governed by the maximum time a job is allowed to run.
  no_output_timeout: Duration?

  /// Specify when to enable or disable the step.
  ///
  /// Takes the following values: `always`, `on_success`, `on_fail` (default: on_success)
  `when`: ("always"|"on_success"|"on_fail")? 
}

class SetupRemoteDocker {
  version: String
  docker_layer_cacheing: Boolean
}

/// Special step used to persist a temporary file to be used by another job in the workflow.
/// For more information on using workspaces, see the
/// [Using Workspaces to Share Data Between Jobs](https://circleci.com/docs/workspaces/) page.
///
/// `persist_to_workspace` adopts the storage settings from the storage customization controls on
/// the CircleCI web app.
/// If no custom setting is provided, `persist_to_workspace` defaults to 15 days.
/// 
/// Workspace storage retention can be customized on the CircleCI web app by navigating to Plan > Usage Controls.
class PersistToWorkspace {
  /// Either an absolute path or a path relative to `working_directory`
  root: String

  /// Glob identifying file(s), or a non-glob path to a directory to add to the shared workspace.
  ///
  /// Interpreted as relative to the workspace root.
  /// Must not be the workspace root itself
  paths: Listing<String>
}

/// Special step used to attach the workflowâ€™s workspace to the current container.
///
/// The full contents of the workspace are downloaded and copied into the directory the workspace
/// is being attached at.
/// For more information on using workspaces, see the
/// [Using Workspaces to Share Data Between Jobs](https://circleci.com/docs/workspaces/) page.
class AttachWorkspace {
  /// Directory to attach the workspace to.
  at: String
}

class Run {
  run: String
}

class Command {
  parameters: Mapping<String, Parameter>
  steps: Listing<Step>(!isEmpty)
}

class Parameter {
  description: String?
  default: String|Number|Boolean
  type: "string"|"integer"|"boolean"
}

class StoreTestResults {
  store_test_results: Path
}

class Path {
  path: String
}

typealias LogicStatement = Boolean|String|And|Or|Not|Equal|Matches

class And {
  and: Listing<Boolean|String|And|Or|Not|Equal|Matches>
}

class Or {
  or: Listing<Boolean|String|And|Or|Not|Equal|Matches>
}

class Not {
  not: Boolean|String|And|Or|Not|Equal|Matches
}

class Equal {
  equals: Listing<Boolean|String|Number>
}

class Matches {
  matches: Match
}

class Match {
  value: String
  pattern: String
}

typealias CalledCommand = Mapping<String, CommandCall>(length == 1)

typealias CommandCall = Mapping<String, String|Number|Boolean>

output {
  renderer = new YamlRenderer {
    converters {
      [StepConfig] = (it) -> it.toMap().remove("command") + (it.command?.toMap() ?? Map())
    }
  }
}
