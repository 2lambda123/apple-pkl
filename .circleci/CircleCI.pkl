/// Schema for CircleCI config.yml
/// This module is a work in progress, if you find some unsuported feature
/// feel free to add it.
module CircleCI

// no need to use olders versions
version: Number(this == 2.1) = 2.1

commands: Mapping<String, Command>?

jobs: Mapping<String, Job>?

/// Used for orchestrating all jobs.
///
/// Each workflow consists of the workflow name as a key and a map as a value.
/// A name should be unique within the current config.yml.
/// The top-level keys for the Workflows configuration are version and jobs.
/// For more information, see the
/// [Using Workflows to Orchestrate Jobs](https://circleci.com/docs/workflows/) page.
workflows: Mapping<String, Workflow>?

parameters: Mapping<String, Parameter>?

class Job {
  shell: String?
  steps: Listing<Step>(!isEmpty)
  working_directory: String?
  parallelism: Int?
  environment: Mapping<String, String>?

  /// The `resource_class` feature allows you to configure CPU and RAM resources for each job.
  ///
  /// Resource classes are available for each execution environment, as described in the tables below.
  ///
  /// We implement soft concurrency limits for each resource class to ensure our system remains
  /// stable for all customers.
  /// If you are on a Performance or custom plan and experience queuing for certain resource
  /// classes, it is possible you are hitting these limits.
  /// Contact [CircleCI support](https://support.circleci.com/hc/en-us/requests/new) to request a
  /// raise on these limits for your account.
  ///
  /// If you do not specify a resource class, CircleCI will use a default value that is subject
  /// to change.
  /// It is best practice to specify a resource class as opposed to relying on a default.
  resource_class: ResourceClass?
  docker: Listing<DockerImage>?
  macos: MacOSExecutor?
  machine: Machine?
}

typealias ResourceClass =
  "small"
  |"medium"
  |"medium+"
  |"large"
  |"xlarge"
  |"2xlarge"
  |"2xlarge+"
  |"arm.medium"
  |"arm.large"
  |"arm.xlarge"
  |"arm.2xlarge"

class MacOSExecutor {
  xcode: String
}

class Machine {
  /// The virtual machine image to use.
  ///
  /// View [available images](https://circleci.com/developer/images?imageType=machine).
  ///
  /// Note: This key is not supported for Linux VMs on installations of CircleCI server.
  /// For information about customizing machine executor images on CircleCI installed on your
  /// servers, see our VM Service documentation
  image: String
}

class DockerImage {
  image: String
}

class Workflow {
  jobs: Listing<*Mapping<String, WorkflowJob>(length == 1)|String>
  `when`: LogicStatement?
}

class WorkflowJob {
  filters: Filter?
  requires: Listing<String>?
}

class Filter {
  branches: FilterSpec?
  tags: FilterSpec?
}

class FilterSpec {
  only: String?(this != null || ignore != null)
  ignore: String?(this != null || only != null)
}

typealias Step = *StepConfig|"checkout"|"setup_remote_docker"|"add_ssh_keys"

class StepConfig {
  run: (*RunConfig|String)?

  /// Special step used to upload and store test results for a build.
  ///
  /// Test results are visible on the CircleCI web application under each build’s *Test Summary*
  /// section.
  /// Storing test results is useful for timing analysis of your test suites.
  /// For more information on storing test results, see the
  /// [Collecting Test Data](https://circleci.com/docs/collect-test-data/) page.
  ///
  /// It is also possible to store test results as a build artifact; to do so, please refer to the
  /// [store_artifacts] step.
  store_test_results: StoreTestResults?
  
  /// Step to store artifacts (for example logs, binaries, etc) to be available in the web app
  /// or through the API.
  ///
  /// See the [Uploading Artifacts](https://circleci.com/docs/artifacts/) document for more information.
  store_artifacts: StoreArtifacts?

  /// Allows Docker commands to be run locally.
  ///
  /// See [Running Docker Commands](https://circleci.com/docs/building-docker-images/) for details.
  setup_remote_docker: SetupRemoteDocker?

  /// Special step used to persist a temporary file to be used by another job in the workflow.
  /// For more information on using workspaces, see the
  /// [Using Workspaces to Share Data Between Jobs](https://circleci.com/docs/workspaces/) page.
  ///
  /// `persist_to_workspace` adopts the storage settings from the storage customization controls on
  /// the CircleCI web app.
  /// If no custom setting is provided, `persist_to_workspace` defaults to 15 days.
  /// 
  /// Workspace storage retention can be customized on the CircleCI web app by navigating to Plan > Usage Controls.
  persist_to_workspace: PersistToWorkspace?

  /// Special step used to attach the workflow’s workspace to the current container.
  ///
  /// The full contents of the workspace are downloaded and copied into the directory the workspace
  /// is being attached at.
  /// For more information on using workspaces, see the
  /// [Using Workspaces to Share Data Between Jobs](https://circleci.com/docs/workspaces/) page.
  attach_workspace: AttachWorkspace?

  command: CalledCommand?

  /// Generates and stores a cache of a file or directory of files such as dependencies or source
  /// code in our object storage.
  ///
  /// Later jobs can [restore this cache](https://circleci.com/docs/configuration-reference/#restore_cache).
  /// Learn more on the [Caching Dependencies](https://circleci.com/docs/caching/) page.
  /// 
  /// Cache retention can be customized on the [CircleCI web app](https://app.circleci.com/) by
  /// navigating to Plan > Usage Controls.
  save_cache: SaveCache?

  /// Restores a previously saved cache based on a key. 
  /// 
  /// Cache needs to have been saved first for this key using the [save_cache] step.
  ///
  /// Learn more in [the caching documentation](https://circleci.com/docs/caching/).
  restore_cache: RestoreCache?
}

class RunConfig {
  /// Command to run via the shell
  command: String

  /// Title of the step to be shown in the CircleCI UI (default: full `command`)
  name: String?
  
  /// Shell to use for execution command (default: See [Default Shell Options](https://circleci.com/docs/configuration-reference/#default-shell-options))
  shell: String?

  /// Additional environmental variables, locally scoped to command
  environment: Mapping<String, String>?

  /// Whether or not this step should run in the background (default: `false`)
  background: Boolean?

  /// In which directory to run this step. Will be interpreted relative to the working_directory
  /// of the job). (default: `.`)
  working_directory: String?

  /// Elapsed time the command can run without output.
  ///
  /// The default is 10 minutes and the maximum is governed by the maximum time a job is allowed to run.
  no_output_timeout: Duration?

  /// Specify when to enable or disable the step.
  ///
  /// Takes the following values: `always`, `on_success`, `on_fail` (default: on_success)
  `when`: ("always"|"on_success"|"on_fail")? 
}

class SaveCache {
  /// List of directories which should be added to the cache
  paths: Listing<String>
  
  /// Unique identifier for this cache
  key: String
  
  /// Title of the step to be shown in the CircleCI UI (default: “Saving Cache”)
  name: String?
  
  /// [Specify when to enable or disable the step](https://circleci.com/docs/configuration-reference/#the-when-attribute).
  ///
  /// Takes the following values: always, on_success, on_fail (default: on_success)
  `when`: ("always"|"on_success"|"on_fail")?
}

class RestoreCache {
  /// Single cache key to restore
  key: String?(this != null || keys != null)
  
  /// List of cache keys to lookup for a cache to restore.
  ///
  /// Only first existing key will be restored.
  keys: Listing<String>?

  /// Title of the step to be shown in the CircleCI UI (default: “Restoring Cache”)
  name: String?
}

class SetupRemoteDocker {
  version: String
  docker_layer_cacheing: Boolean
}

class PersistToWorkspace {
  /// Either an absolute path or a path relative to `working_directory`
  root: String

  /// Glob identifying file(s), or a non-glob path to a directory to add to the shared workspace.
  ///
  /// Interpreted as relative to the workspace root.
  /// Must not be the workspace root itself
  paths: Listing<String>
}

class AttachWorkspace {
  /// Directory to attach the workspace to.
  at: String
}

class Run {
  run: String
}

class Command {
  parameters: Mapping<String, Parameter>
  steps: Listing<Step>(!isEmpty)
}

class Parameter {
  description: String?
  default: String|Number|Boolean
  type: "string"|"integer"|"boolean"
}

class StoreTestResults {
  /// Path (absolute, or relative to your `working_directory`) to directory containing JUnit XML
  /// test metadata files, or to a single test file.
  path: String
}

class StoreArtifacts {
  /// Directory in the primary container to save as job artifacts
  path: String

  /// Prefix added to the artifact paths in the artifacts API (default: the directory of the file
  /// specified in path)
  destination: String?
}

typealias LogicStatement = Boolean|String|And|Or|Not|Equal|Matches

class And {
  and: Listing<Boolean|String|And|Or|Not|Equal|Matches>
}

class Or {
  or: Listing<Boolean|String|And|Or|Not|Equal|Matches>
}

class Not {
  not: Boolean|String|And|Or|Not|Equal|Matches
}

class Equal {
  equals: Listing<Boolean|String|Number>
}

class Matches {
  matches: Match
}

class Match {
  value: String
  pattern: String
}

typealias CalledCommand = Mapping<String, CommandCall>(length == 1)

typealias CommandCall = Mapping<String, String|Number|Boolean>

output {
  renderer = new YamlRenderer {
    converters {
      [StepConfig] = (it) -> it.toMap().remove("command") + (it.command?.toMap() ?? Map())
    }
  }
}
