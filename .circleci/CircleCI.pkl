/// Schema for CircleCI config.yml
/// This module is a work in progress, if you find some unsuported feature
/// feel free to add it.
module CircleCI

// no need to use olders versions
version: Number(this == 2.1) = 2.1

/// A command defines a sequence of steps as a map to be executed in a job, enabling you to reuse
/// a single command definition across multiple jobs.
///
/// For more information see the
/// [Reusable Config Reference Guide](https://circleci.com/docs/reusing-config/).
commands: Mapping<String, Command>?

/// A Workflow is comprised of one or more uniquely named jobs.
///
/// Jobs are specified in the jobs map, see
/// [Sample config.yml](https://circleci.com/docs/sample-config/) for two examples of a job map.
/// The name of the job is the key in the map, and the value is a map describing the job.
jobs: Mapping<String, Job>?

/// Used for orchestrating all jobs.
///
/// Each workflow consists of the workflow name as a key and a map as a value.
/// A name should be unique within the current config.yml.
/// The top-level keys for the Workflows configuration are version and jobs.
/// For more information, see the
/// [Using Workflows to Orchestrate Jobs](https://circleci.com/docs/workflows/) page.
workflows: Mapping<String, Workflow(isValidWorkflow)>?

local isValidWorkflow = (workflow: Workflow) ->
  workflow.jobs.toList().every((jobs) -> jobs.keys.every((it) -> jobs.containsKey(it)))

/// Pipeline parameters declared for use in the configuration.
///
/// See [Pipeline Values and Parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-in-configuration)
/// for usage details.
parameters: Mapping<String, Parameter>?

class Job {
  /// Shell to use for execution command in all steps.
  ///
  /// Can be overridden by shell in each step (default: See Default Shell Options)
  shell: String?

  /// A list of [steps](https://circleci.com/docs/configuration-reference/#steps) to be performed
  steps: Listing<Step>(!isEmpty)

  /// In which directory to run the steps.
  ///
  /// Will be interpreted as an absolute path.
  ///
  /// Default: `~/project` (where project is a literal string, not the name of your specific project).
  ///
  /// Processes run during the job can use the `$CIRCLE_WORKING_DIRECTORY` environment variable to
  /// refer to this directory.
  ///
  /// Note: Paths written in your YAML configuration file will not be expanded; if your
  /// store_test_results.path is $CIRCLE_WORKING_DIRECTORY/tests, then CircleCI will attempt to
  /// store the test subdirectory of the directory literally named $CIRCLE_WORKING_DIRECTORY,
  /// dollar sign $ and all. working_directory will be created automatically if it doesn’t exist.
  working_directory: String?

  /// Number of parallel instances of this job to run (default: 1)
  parallelism: Int?

  /// A map of environment variable names and values.
  environment: Mapping<String, String>?

  /// The `resource_class` feature allows you to configure CPU and RAM resources for each job.
  ///
  /// Resource classes are available for each execution environment, as described in the tables below.
  ///
  /// We implement soft concurrency limits for each resource class to ensure our system remains
  /// stable for all customers.
  /// If you are on a Performance or custom plan and experience queuing for certain resource
  /// classes, it is possible you are hitting these limits.
  /// Contact [CircleCI support](https://support.circleci.com/hc/en-us/requests/new) to request a
  /// raise on these limits for your account.
  ///
  /// If you do not specify a resource class, CircleCI will use a default value that is subject
  /// to change.
  /// It is best practice to specify a resource class as opposed to relying on a default.
  resource_class: ResourceClass?

  /// Options for [docker executor](https://circleci.com/docs/configuration-reference/#docker)
  docker: Listing<DockerImage>?

  /// CircleCI supports running jobs on macOS, to allow you to build, test, and deploy apps for
  /// macOS, iOS, tvOS and watchOS.
  ///
  /// To run a job in a macOS virtual machine, add the macos key to the top-level configuration
  /// for your job and specify the version of Xcode you would like to use.
  macos: MacOSExecutor?

  /// Options for [machine executor](https://circleci.com/docs/configuration-reference/#machine)
  machine: Machine?
}

typealias ResourceClass =
  "small"
  |"medium"
  |"medium+"
  |"large"
  |"xlarge"
  |"2xlarge"
  |"2xlarge+"
  |"arm.medium"
  |"arm.large"
  |"arm.xlarge"
  |"arm.2xlarge"

class MacOSExecutor {
  /// The version of Xcode that is installed on the virtual machine, see the
  /// [Supported Xcode Versions section of the Testing iOS document](https://circleci.com/docs/using-macos/#supported-xcode-versions)
  /// for the complete list.
  xcode: String
}

class Machine {
  /// The virtual machine image to use.
  ///
  /// View [available images](https://circleci.com/developer/images?imageType=machine).
  ///
  /// Note: This key is *not* supported for Linux VMs on installations of CircleCI server.
  /// For information about customizing `machine` executor images on CircleCI installed on your
  /// servers, see our [VM Service documentation](https://circleci.com/docs/server/v4.1/operator/manage-virtual-machines-with-vm-service/)
  image: String

  /// Set this to `true` to enable [Docker Layer Caching](https://circleci.com/docs/docker-layer-caching/).
  docker_layer_caching: Boolean?
}

class DockerImage {
  image: String
}

class Workflow {
  /// A job can have the keys `requires`, `name`, `context`, `type`, and `filters`.
  jobs: Listing<*Mapping<String, WorkflowJob>(length == 1)|String>
  `when`: LogicStatement?
}

class WorkflowJob {
  /// The name key can be used to invoke reusable jobs across any number of workflows.
  ///
  /// Using the name key ensures numbers are not appended to your job name (i.e. sayhello-1,
  /// sayhello-2, etc.).
  /// The name you assign to the name key needs to be unique, otherwise the numbers will still be
  /// appended to the job name.
  name: String?

  /// A list of jobs that must succeed for the job to start.
  ///
  /// Note: When jobs in the current workflow that are listed as dependencies are not executed
  /// (due to a filter function for example), their requirement as a dependency for other jobs will
  /// be ignored by the requires option.
  /// However, if all dependencies of a job are filtered, then that job will not be executed either.
  requires: Listing<String>?

  /// The name of the context(s).
  ///
  /// Jobs may be configured to use global environment variables set for an organization, see the
  /// [Contexts](https://circleci.com/docs/contexts/) document for adding a context in the
  /// application settings.
  ///
  /// The initial default name is org-global.
  /// Each context name must be unique.
  /// If using CircleCI Server, only a single Context per workflow is supported.
  /// Note: A maximum of 100 unique contexts across all workflows is allowed
  context: String|Listing<String>?

  /// A job may have a type of `approval` indicating it must be manually approved before downstream
  /// jobs may proceed.
  ///
  /// For more information see the Using Workflows to Orchestrate Jobs page.
  type: "approval"?

  /// Job Filters can have the key branches or tags
  filters: Filter?
}

class Filter {
  /// Branches can have the keys only and ignore which either map to a single string naming a branch.
  /// You may also use regular expressions to match against branches by enclosing them with slashes,
  /// or map to a list of such strings.
  /// Regular expressions must match the *entire* string.
  ///
  /// Any branches that match `only` will run the job.
  /// Any branches that match `ignore` will not run the job.
  /// If neither `only` nor `ignore` are specified then all branches will run the job.
  /// If both `only` and `ignore` are specified the `only` is considered before `ignore`.
  branches: FilterSpec?

  /// CircleCI does not run workflows for tags unless you explicitly specify tag filters.
  /// Additionally, if a job requires any other jobs (directly or indirectly), you must specify tag
  /// filters for those jobs.
  ///
  /// Tags can have the keys only and ignore.
  /// You may also use regular expressions to match against tags by enclosing them with slashes,
  /// or map to a list of such strings.
  /// Regular expressions must match the entire string.
  /// Both lightweight and annotated tags are supported.
  ///
  /// Any tags that match only will run the job.
  /// Any tags that match ignore will not run the job.
  /// If neither only nor ignore are specified then the job is skipped for all tags.
  /// If both only and ignore are specified the only is considered before ignore.
  tags: FilterSpec?
}

class FilterSpec {
  /// Either a single branch specifier, or a list of branch specifiers
  only: (String|Listing<String>)?(this != null || ignore != null)

  /// Either a single branch specifier, or a list of branch specifiers
  ignore: (String|Listing<String>)?(this != null || only != null)
}

typealias Step = *StepConfig|"checkout"|"setup_remote_docker"|"add_ssh_keys"

class StepConfig {
  run: (*RunConfig|String)?

  /// Special step used to upload and store test results for a build.
  ///
  /// Test results are visible on the CircleCI web application under each build’s *Test Summary*
  /// section.
  /// Storing test results is useful for timing analysis of your test suites.
  /// For more information on storing test results, see the
  /// [Collecting Test Data](https://circleci.com/docs/collect-test-data/) page.
  ///
  /// It is also possible to store test results as a build artifact; to do so, please refer to the
  /// [store_artifacts] step.
  store_test_results: StoreTestResults?

  /// Step to store artifacts (for example logs, binaries, etc) to be available in the web app
  /// or through the API.
  ///
  /// See the [Uploading Artifacts](https://circleci.com/docs/artifacts/) document for more information.
  store_artifacts: StoreArtifacts?

  /// Allows Docker commands to be run locally.
  ///
  /// See [Running Docker Commands](https://circleci.com/docs/building-docker-images/) for details.
  setup_remote_docker: SetupRemoteDocker?

  /// Special step used to persist a temporary file to be used by another job in the workflow.
  /// For more information on using workspaces, see the
  /// [Using Workspaces to Share Data Between Jobs](https://circleci.com/docs/workspaces/) page.
  ///
  /// `persist_to_workspace` adopts the storage settings from the storage customization controls on
  /// the CircleCI web app.
  /// If no custom setting is provided, `persist_to_workspace` defaults to 15 days.
  /// 
  /// Workspace storage retention can be customized on the CircleCI web app by navigating to Plan > Usage Controls.
  persist_to_workspace: PersistToWorkspace?

  /// Special step used to attach the workflow’s workspace to the current container.
  ///
  /// The full contents of the workspace are downloaded and copied into the directory the workspace
  /// is being attached at.
  /// For more information on using workspaces, see the
  /// [Using Workspaces to Share Data Between Jobs](https://circleci.com/docs/workspaces/) page.
  attach_workspace: AttachWorkspace?

  command: CalledCommand?

  /// Generates and stores a cache of a file or directory of files such as dependencies or source
  /// code in our object storage.
  ///
  /// Later jobs can [restore this cache](https://circleci.com/docs/configuration-reference/#restore_cache).
  /// Learn more on the [Caching Dependencies](https://circleci.com/docs/caching/) page.
  /// 
  /// Cache retention can be customized on the [CircleCI web app](https://app.circleci.com/) by
  /// navigating to Plan > Usage Controls.
  save_cache: SaveCache?

  /// Restores a previously saved cache based on a key. 
  /// 
  /// Cache needs to have been saved first for this key using the [save_cache] step.
  ///
  /// Learn more in [the caching documentation](https://circleci.com/docs/caching/).
  restore_cache: RestoreCache?
}

class RunConfig {
  /// Command to run via the shell
  command: String

  /// Title of the step to be shown in the CircleCI UI (default: full `command`)
  name: String?
  
  /// Shell to use for execution command (default: See [Default Shell Options](https://circleci.com/docs/configuration-reference/#default-shell-options))
  shell: String?

  /// Additional environmental variables, locally scoped to command
  environment: Mapping<String, String>?

  /// Whether or not this step should run in the background (default: `false`)
  background: Boolean?

  /// In which directory to run this step. Will be interpreted relative to the working_directory
  /// of the job). (default: `.`)
  working_directory: String?

  /// Elapsed time the command can run without output.
  ///
  /// The default is 10 minutes and the maximum is governed by the maximum time a job is allowed to run.
  no_output_timeout: Duration?

  /// Specify when to enable or disable the step.
  ///
  /// Takes the following values: `always`, `on_success`, `on_fail` (default: on_success)
  `when`: ("always"|"on_success"|"on_fail")? 
}

class SaveCache {
  /// List of directories which should be added to the cache
  paths: Listing<String>
  
  /// Unique identifier for this cache
  key: String
  
  /// Title of the step to be shown in the CircleCI UI (default: “Saving Cache”)
  name: String?
  
  /// [Specify when to enable or disable the step](https://circleci.com/docs/configuration-reference/#the-when-attribute).
  ///
  /// Takes the following values: always, on_success, on_fail (default: on_success)
  `when`: ("always"|"on_success"|"on_fail")?
}

class RestoreCache {
  /// Single cache key to restore
  key: String?(this != null || keys != null)
  
  /// List of cache keys to lookup for a cache to restore.
  ///
  /// Only first existing key will be restored.
  keys: Listing<String>?

  /// Title of the step to be shown in the CircleCI UI (default: “Restoring Cache”)
  name: String?
}

class SetupRemoteDocker {
  version: String
  docker_layer_cacheing: Boolean
}

class PersistToWorkspace {
  /// Either an absolute path or a path relative to `working_directory`
  root: String

  /// Glob identifying file(s), or a non-glob path to a directory to add to the shared workspace.
  ///
  /// Interpreted as relative to the workspace root.
  /// Must not be the workspace root itself
  paths: Listing<String>
}

class AttachWorkspace {
  /// Directory to attach the workspace to.
  at: String
}

class Run {
  run: String
}

class Command {
  parameters: Mapping<String, Parameter>
  steps: Listing<Step>(!isEmpty)
}

class Parameter {
  description: String?
  default: String|Number|Boolean
  type: "string"|"integer"|"boolean"
}

class StoreTestResults {
  /// Path (absolute, or relative to your `working_directory`) to directory containing JUnit XML
  /// test metadata files, or to a single test file.
  path: String
}

class StoreArtifacts {
  /// Directory in the primary container to save as job artifacts
  path: String

  /// Prefix added to the artifact paths in the artifacts API (default: the directory of the file
  /// specified in path)
  destination: String?
}

typealias LogicStatement = Boolean|String|And|Or|Not|Equal|Matches

class And {
  and: Listing<Boolean|String|And|Or|Not|Equal|Matches>
}

class Or {
  or: Listing<Boolean|String|And|Or|Not|Equal|Matches>
}

class Not {
  not: Boolean|String|And|Or|Not|Equal|Matches
}

class Equal {
  equals: Listing<Boolean|String|Number>
}

class Matches {
  matches: Match
}

class Match {
  value: String
  pattern: String
}

typealias CalledCommand = Mapping<String, CommandCall>(length == 1)

typealias CommandCall = Mapping<String, String|Number|Boolean>

output {
  renderer = new YamlRenderer {
    converters {
      [StepConfig] = (it) -> it.toMap().remove("command") + (it.command?.toMap() ?? Map())
    }
  }
}
