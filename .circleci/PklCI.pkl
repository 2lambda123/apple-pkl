/// CI job template specifically for Pkl.
module PklCI

import "CircleCI.pkl"

/// A map of user-selected names to either: orb references (strings) or orb definitions (maps).
///
/// Orb definitions must be the orb-relevant subset of 2.1 config.
/// See the [Creating Orbs](https://circleci.com/docs/creating-orbs/) documentation for details.
orbs: Mapping<String, Orb|String>?

/// The jobs required by this build
jobs: Mapping<String, CircleCI.Job>

/// The workflow to run for pull request builds.
prb: CircleCI.Workflow

/// The workflow to run for commits on the main branch
main: CircleCI.Workflow

/// The workflow to run for tags that match a semver.
///
/// If [null], this workflow is omitted.
release: CircleCI.Workflow?

/// The CircleCI output.
circleCi: CircleCI = new {
  version = 2.1
  orbs = (module.orbs) {
    ["pr-approval"] = "apple/pr-approval@0.1.0"
  }
  jobs = module.jobs
  workflows {
    ["prb"] = (prb) {
      `when` {
        matches {
          pattern = "^pull/\\d+(/head)?$"
          value = "<< pipeline.git.branch >>"
        }
      }
      // TODO: add approval flow for every project
      jobs = new {
        new {
          ["hold"] {
            type = "approval"
          }
        }
        new {
          ["pr-approval/authenticate"] {
            context = "pkl-pr-approval"
          }
        }
        for (job in prb.jobs) {
          job |> requireApproval
        }
      }
    }
    ["main"] = (main) {
      `when` {
        equal {
          "main"
          CircleCI.pipelineValues.`pipeline.git.branch`
        }
      }
    }
    when (release != null) {
      ["release"] = (release) {
        // Can't use `when` for building on tags.
        // See: https://discuss.circleci.com/t/cant-trigger-workflow-on-git-tag-push-using-when-condition/43252
        jobs = super.jobs |> runOnTag
      }
    }
  }
}

local runOnTag = (jobs: Listing<Mapping<String, CircleCI.WorkflowJob>|String>) ->
  new Listing<*Mapping<String, CircleCI.WorkflowJob>|String> {
    // TODO(oss) remove me
    new {
      ["hold"] {
        type = "approval"
      }
    }
    for (job in jobs) {
      when (job is String) {
        new {
          [job] {
            filters {
              tags {
                only = #"/^v?\d+\.\d+\.\d+$/"#
              }
              branches {
                ignore = "/.*/"
              }
            }
            // TODO(oss) remove me
            requires {
              "hold"
            }
          }
        }
      } else {
        (job) {
          [job.keys.first] {
            filters {
              tags {
                only = #"/^v?\d+\.\d+\.\d+$/"#
              }
              branches {
                ignore = "/.*/"
              }
            }
            // TODO(oss) remove me
            requires {
              "hold"
            }
          }
        }
      }
    }
  }

local requireApproval = (it: String|Mapping<String, CircleCI.WorkflowJob>) ->
  if (it is String)
    new Mapping<String, CircleCI.WorkflowJob> {
      [it] {
        requires { "hold"; "pr-approval/authenticate" }
      }
    }
  else
    (it) {
      [it.keys.first] {
        requires { "hold"; "pr-approval/authenticate" }
      }
    }

output = circleCi.output

// re-export types so they are available without qualification
typealias StoreTestResults = CircleCI.StoreTestResults
typealias SaveCacheStep = CircleCI.SaveCacheStep
typealias AttachWorkspaceStep = CircleCI.AttachWorkspaceStep
typealias RunStep = CircleCI.RunStep
typealias PersistToWorkspaceStep = CircleCI.PersistToWorkspaceStep
typealias RestoreCacheStep = CircleCI.RestoreCacheStep
typealias SetupRemoteDockerStep = CircleCI.SetupRemoteDockerStep
typealias UnlessStep = CircleCI.UnlessStep
typealias WhenStep = CircleCI.WhenStep
typealias LogicStatement = CircleCI.LogicStatement
typealias Job = CircleCI.Job
typealias JobFilters = CircleCI.JobFilters
typealias Workflow = CircleCI.Workflow
typealias WorkflowJob = CircleCI.WorkflowJob
typealias Orb = CircleCI.Orb
