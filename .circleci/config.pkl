// CircleCI build file.
// This file needs to be rendered to `.circleci/config.yml`
// or it won't do anything.
amends "CircleCI.pkl"

import "package://artifacts.apple.com/pkl/pkl/temp.pkl.experimental@1.0.0#/URI.pkl"

version = 2.1

local JAVA_11 = "11.0.20.1+1"

local JAVA_17 = "17.0.8.1+1"

local persistToWorkspace: Step = new {
  persist_to_workspace {
    root = "."
    paths {
      "pkl-cli/build/executable/"
    }
  }
}

local gradleArgs = "--info --stacktrace \(gradleJvmArgs)"

local gradleJvmArgs =
  "'"
  + "-Dorg.gradle.jvmargs="
  + "-Dfile.encoding=UTF-8 "
  + // google-java-format requires jdk.compiler exports
    "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED "
  + "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED "
  + "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED "
  + "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED "
  + "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
  + "'"

local function setUpLinuxEnvironment(arch: "x64"|"arm64", jdkVersion: String): StepConfig =
  let (muslVersion = "1.2.2")
  let (zlibVersion = "1.2.13")
  let (jdkVersionEncoded = URI.encodeComponent(jdkVersion))
  let (jdkVersionAlt = jdkVersion.replaceLast("+", "_"))
  let (majorJdkVersion = jdkVersion.split(".").first)
    new {
      run {
        name = "Set up environment"
        command = new Listing {
          #"""
            #!/usr/bin/env bash
            set -eo pipefail

            # install jdk
            curl -L \
              https://github.com/adoptium/temurin\#(majorJdkVersion)-binaries/releases/download/jdk-\#(jdkVersionEncoded)/OpenJDK\#(majorJdkVersion)U-jdk_\#(if (arch == "x64") "x64" else "aarch64")_linux_hotspot_\#(jdkVersionAlt).tar.gz -o /tmp/jdk.tar.gz

            tar tf /tmp/jdk.tar.gz
            mkdir ~/jdk \
            && cd ~/jdk \
            && cat /tmp/jdk.tar.gz | tar --strip-components=1 -xzC .

            mkdir -p ~/staticdeps/bin
          """#
          // don't need musl on arm because GraalVM only supports musl builds on x86
          when (arch == "x64") {
            #"""
            # install musl
            curl -L https://musl.libc.org/releases/musl-\#(muslVersion).tar.gz -o /tmp/musl.tar.gz

            mkdir -p /tmp/dep_musl-\#(muslVersion) \
            && cd /tmp/dep_musl-\#(muslVersion) \
            && cat /tmp/musl.tar.gz | tar --strip-components=1 -xzC . \
            && echo "musl-\#(muslVersion): configure..." && ./configure --disable-shared --prefix=~/staticdeps > /dev/null \
            && echo "musl-\#(muslVersion): make..." && make -s -j4 \
            && echo "musl-\#(muslVersion): make install..." && make -s install \
            && rm -rf /tmp/dep_musl-\#(muslVersion)

            # native-image expects to find an executable at this path.
            ln -s ~/staticdeps/bin/musl-gcc ~/staticdeps/bin/x86_64-linux-musl-gcc
            """#
          }
        }.join("\n\n")
      }
    }

jobs {
  ["build-ubuntu-amd64"] {
    machine {
      image = "ubuntu-2204:current"
    }
    resource_class = "medium"
    steps {
      "checkout"
      new {
        restore_cache {
          name = "Restore Gradle Dependencies Cache"
          key = "gradle-dependencies-{{ checksum \"gradle/libs.versions.toml\" }}"
        }
      }
      setUpLinuxEnvironment("x64", JAVA_11)
//       // This is only used s.t. we can get more RAM in CircleCI builds.
//       new {
//         setup_remote_docker {
//           version = "20.10.14"
//           docker_layer_cacheing = true
//         }
//       }
      gradle("buildNative")
      new {
        save_cache {
          name = "Save Gradle Dependencies Cache"
          key = "gradle-dependencies-{{ checksum \"gradle/libs.versions.toml\" }}"
          paths {
            "~/.gradle/caches/modules-2/files-2.1/"
          }
        }
      }
      persistToWorkspace
    }
  }
  ["build-ubuntu-arm64"] {
    machine {
      image = "ubuntu-2204:current"
    }
    resource_class = "arm.medium"
    steps {
      "checkout"
      new {
        restore_cache {
          name = "Restore Gradle Dependencies Cache"
          key = "gradle-dependencies-{{ checksum \"gradle/libs.versions.toml\" }}"
        }
      }
      setUpLinuxEnvironment("arm64", JAVA_11)
      gradle("buildNative")
      new {
        save_cache {
          name = "Save Gradle Dependencies Cache"
          key = "gradle-dependencies-{{ checksum \"gradle/libs.versions.toml\" }}"
          paths {
            "~/.gradle/caches/modules-2/files-2.1/"
          }
        }
      }
      persistToWorkspace
    }
  }
//   ["dev-jdk11"] {
//     docker {
//       image("cimg/openjdk:11.0")
//     }
//     steps {
//       "checkout"
//       gradle("build")
//       new {
//         store_test_results {
//           path = "./pkl-core/build/test-results/"
//         }
//       }
//     }
//   }
//   ["dev-jdk17"] {
//     docker {
//       image("cimg/openjdk:17.0")
//     }
//     steps {
//       "checkout"
//       gradle("build")
//     }
//   }
//   ["dev-bench"] {
//     docker {
//       image("cimg/openjdk:11.0")
//     }
//     steps {
//       "checkout"
//       gradle("jmh")
//     }
//   }
//   ["dev-gradle-compatibility"] {
//     docker {
//       image("cimg/openjdk:11.0")
//     }
//     steps {
//       "checkout"
//       gradle(":pkl-gradle:build :pkl-gradle:compatibilityTestReleases :pkl-gradle:compatibilityTestCandidate")
//     }
//   }
}

workflows {
//   ["prb"] {
//     jobs {
//       "dev-jdk11"
//       "dev-jdk17"
//       "dev-bench"
//       // we should use linux instead of mac as it's much cheaper
//       "build-macos-amd64"
//       // disabling gradle-compatibility for now because there's some failling tests (also failing on rio)
//       // "dev-gradle-compatibility"
//     }
//   }
// runs out of memory on the free large tier

  ["build-native-images"] {
    jobs {
      new {
        ["build-ubuntu-arm64"] {
          filters {
            branches {
              only = "main"
            }
          }
        }
      }
      new {
        ["build-ubuntu-amd64"] {
          filters {
            branches {
              only = "main"
            }
          }
        }
      }
//       new {
//         ["build-macos-amd64"] {
//           filters {
//             branches {
//               only = "main"
//             }
//           }
//         }
//       }
    }
  }
}

local function gradle(args: String): StepConfig = new {
  run {
    name = "gradle \(args)"
    command = """
      export PATH=~/staticdeps/bin:$PATH
      export JAVA_HOME=~/jdk
      ./gradlew \(gradleArgs) \(args)
      """
  }
}

local function image(imageName: String): DockerImage = new {
  image = imageName
}
