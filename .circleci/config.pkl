// CircleCI build file.
// This file needs to be rendered to `.circleci/config.yml`
// or it won't do anything.
amends "CircleCI.pkl"

import "package://artifacts.apple.com/pkl/pkl/temp.pkl.experimental@1.0.0#/URI.pkl"

version = 2.1

local JAVA_11 = "11.0.20.1+1"

local JAVA_17 = "17.0.8.1+1"

local persistToWorkspace: Step = new {
  persist_to_workspace {
    root = "."
    paths {
      "pkl-cli/build/executable/"
    }
  }
}

local function setUpLinuxEnvironment(arch: "amd64"|"aarch64", jdkVersion: String): StepConfig =
  let (muslVersion = "1.2.2")
  let (zlibVersion = "1.2.13")
  let (jdkVersionEncoded = URI.encodeComponent(jdkVersion))
  let (jdkVersionAlt = jdkVersion.replaceLast("+", "_"))
  let (majorJdkVersion = jdkVersion.split(".").first)
    new {
      run {
        name = "Set up environment"
        shell = "#!/bin/bash -exo pipefail"
        command = new Listing {
          #"""
          sed -ie '/\[ol8_codeready_builder\]/,/^$/s/enabled=0/enabled=1/g' /etc/yum.repos.d/oracle-linux-ol8.repo \
            && microdnf -y install util-linux tree coreutils-single findutils curl tar gzip git zlib-devel gcc-c++ make openssl glibc-langpack-en libstdc++-static \
            && microdnf clean all \
            && rm -rf /var/cache/dnf

          # install jdk
          curl -L \
           https://github.com/adoptium/temurin\#(majorJdkVersion)-binaries/releases/download/jdk-\#(jdkVersionEncoded)/OpenJDK\#(majorJdkVersion)U-jdk_\#(if (arch == "amd64") "x64" else "aarch64")_linux_hotspot_\#(jdkVersionAlt).tar.gz -o /tmp/jdk.tar.gz

          mkdir ~/jdk \
            && cd ~/jdk \
            && cat /tmp/jdk.tar.gz | tar --strip-components=1 -xzC .

          mkdir -p ~/staticdeps/bin

          cp /usr/lib/gcc/\#(if (arch == "amd64") "x86_64" else "aarch64")-redhat-linux/8/libstdc++.a ~/staticdeps

          # install zlib
          if [[ ! -f ~/staticdeps/include/zlib.h ]]; then
            curl -L https://github.com/madler/zlib/releases/download/v\#(zlibVersion)/zlib-\#(zlibVersion).tar.gz -o /tmp/zlib.tar.gz

            mkdir -p /tmp/dep_zlib-\#(zlibVersion) \
            && cd /tmp/dep_zlib-\#(zlibVersion) \
            && cat /tmp/zlib.tar.gz | tar --strip-components=1 -xzC . \
            && echo "zlib-\#(zlibVersion): configure..." && ./configure --static --prefix="$HOME"/staticdeps > /dev/null \
            && echo "zlib-\#(zlibVersion): make..." && make -s -j4 \
            && echo "zlib-\#(zlibVersion): make install..." && make -s install \
            && rm -rf /tmp/dep_zlib-\#(zlibVersion)
          fi
          """#
          // don't need musl on aarch because GraalVM only supports musl builds on x86
          when (arch == "amd64") {
            #"""
            # install musl
            if [[ ! -f ~/staticdeps/bin/x86_64-linux-musl-gcc ]]; then
              curl -L https://musl.libc.org/releases/musl-\#(muslVersion).tar.gz -o /tmp/musl.tar.gz

              mkdir -p /tmp/dep_musl-\#(muslVersion) \
              && cd /tmp/dep_musl-\#(muslVersion) \
              && cat /tmp/musl.tar.gz | tar --strip-components=1 -xzC . \
              && echo "musl-\#(muslVersion): configure..." && ./configure --disable-shared --prefix="$HOME"/staticdeps > /dev/null \
              && echo "musl-\#(muslVersion): make..." && make -s -j4 \
              && echo "musl-\#(muslVersion): make install..." && make -s install \
              && rm -rf /tmp/dep_musl-\#(muslVersion)

              # native-image expects to find an executable at this path.
              ln -s ~/staticdeps/bin/musl-gcc ~/staticdeps/bin/x86_64-linux-musl-gcc
            fi
            """#
          }
        }.join("\n\n")
      }
    }

local setupSteps: Listing<Step> = new {
  "checkout"
  restoreGradleCache
}

local nativeBuildCleanupTasks: Listing<Step> = new {
  persistToWorkspace
  saveToGradleCache
  ...storeTestResults
}

local storeTestResults: Listing<Step> = new {
  new {
    // find all test results and write them to the home dir
    run {
      name = "Gather test results"
      command = """
        mkdir ~/test-results/
        find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/ \\;
        """
      `when` = "always"
    }
  }
  new {
    store_test_results {
      path = "~/test-results"
    }
  }
}

local restoreGradleCache: StepConfig = new {
  restore_cache {
    name = "Restore Gradle Dependencies Cache"
    key = "gradle-dependencies-{{ checksum \"gradle/libs.versions.toml\" }}"
  }
}

local saveToGradleCache: StepConfig = new {
  save_cache {
    name = "Save Gradle Dependencies Cache"
    key = "gradle-dependencies-{{ checksum \"gradle/libs.versions.toml\" }}"
    paths {
      "~/.gradle/caches/modules-2/files-2.1/"
    }
  }
}

local function buildLinuxNativeImage(arch: "amd64"|"aarch64", gradleCommand: String): Job = new {
  docker {
    new {
      image =
        if (arch == "aarch64")
          "arm64v8/oraclelinux:8-slim"
        else
          "oraclelinux:8-slim" 
    }
  }
  environment {
    ["JAVA_HOME"] = "$HOME/jdk"
    ["LANG"] = "en_US.UTF-8"
  }
  resource_class = if (arch == "aarch64") "arm.large" else "large"
  steps {
    ...setupSteps
    new {
      restore_cache {
        name = "Restore static deps from cache"
        key = "staticdeps-\(arch)"
      }
    }
    setUpLinuxEnvironment(arch, JAVA_11)
    new {
      save_cache {
        name = "Save statics deps to cache"
        key = "staticdeps-\(arch)"
        paths {
          "~/staticdeps"
        }
      }
    }
    // hack to get more RAM in docker
    new {
      setup_remote_docker {
        version = if (arch == "amd64") "20.10.24" else "default"
        docker_layer_cacheing = true
      }
    }
    gradle(gradleCommand)
    ...nativeBuildCleanupTasks
  }
}

jobs {
  ["build-linux-amd64"] = buildLinuxNativeImage("amd64", "pkl-cli:linuxExecutableAmd64 pkl-core:testLinuxExecutableAmd64")
  ["build-linux-aarch64"] = buildLinuxNativeImage("aarch64", "pkl-cli:linuxExecutableAarch64 pkl-core:testLinuxExecutableAarch64")
  ["build-linux-alpine-amd64"] = buildLinuxNativeImage("amd64", "pkl-cli:alpineExecutableAmd64 pkl-core:testAlpineExecutableAmd64")
  ["build-macos-amd64"] {
    macos {
      xcode = "14.0.0"
    }
    steps {
      "checkout"
      gradle("buildNative")
      persistToWorkspace
      ...storeTestResults
    }
  }
  ["check-jdk11"] {
    docker {
      new {
        image = "cimg/openjdk:11.0"
      }
    }
    steps {
      ...setupSteps
      gradle("check")
      ...storeTestResults
    }
  }
  ["check-jdk17"] {
    docker {
      new {
        image = "cimg/openjdk:17.0"
      }
    }
    steps {
      ...setupSteps
      gradle("check")
      ...storeTestResults
    }
  }
  ["bench"] {
    docker {
      new {
        image = "cimg/openjdk:11.0"
      }
    }
    steps {
      ...setupSteps
      gradle("jmh")
      ...storeTestResults
    }
  }
  ["dev-gradle-compatibility"] {
    docker {
      new {
        image = "cimg/openjdk:17.0"
      }
    }
    steps {
      ...setupSteps
      gradle(":pkl-gradle:build :pkl-gradle:compatibilityTestReleases :pkl-gradle:compatibilityTestCandidate")
      ...storeTestResults
    }
  }
}

workflows {
//   ["prb"] {
//     jobs {
//       "dev-jdk11"
//       "dev-jdk17"
//       "dev-bench"
//       // we should use linux instead of mac as it's much cheaper
//       "build-macos-amd64"
//       // disabling gradle-compatibility for now because there's some failling tests (also failing on rio)
//       // "dev-gradle-compatibility"
//     }
//   }
  // runs out of memory on the free large tier
  ["build-native-images"] {
    jobs {
      // always run linux/amd64 for every commit; including PRBs
      "build-linux-amd64"
      runOnMainOnly("build-linux-aarch64")
      runOnMainOnly("build-linux-alpine-amd64")
      runOnMainOnly("build-macos-amd64")
    }
  }
}

local function gradle(args: String): StepConfig =
  let (gradleJvmArgs = "'" + new Listing<String> {
    "-Dorg.gradle.jvmargs=-Dfile.encoding=UTF-8"
    // google-java-format requires jdk.compiler exports
    "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED"
    "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED"
    "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"
    "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"
    "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
  }.join(" ") + "'")
  let (gradleArgs = "--info --stacktrace \(gradleJvmArgs)")
    new {
      run {
        name = "gradle \(args)"
        command = """
          export PATH=~/staticdeps/bin:$PATH
          ./gradlew \(gradleArgs) \(args)
          """
      }
    }

local function runOnMainOnly(job: String): Mapping<String, WorkflowJob> = new {
  [job] {
    filters {
      branches {
        only = "main"
      }
    }
  }
}
